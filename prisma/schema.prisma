generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Config {
  id         String @id @default(uuid())
  lead_price Int    @default(0)

  @@map("configs")
}

model Treatment {
  id       String @id
  name     String
  price    Int    @default(0)
  category String

  partners_treatments PartnerTreatment[]
  leads_treatments    LeadTreatment[]
  forms               FormTreatment[]
  leads_dispatch      LeadDispatchTreatment[]
  state_prices        TreatmentStatePrice[]

  @@map("treatments")
}

model TreatmentStatePrice {
  id           String @id
  treatment_id String
  state        String
  price        Int

  treatment Treatment @relation(fields: [treatment_id], references: [id], onDelete: Cascade)

  @@map("treatment_state_prices")
}

model Form {
  id               String @id
  name             String
  external_form_id String

  treatments FormTreatment[]

  @@map("forms")
}

model FormTreatment {
  id           String @id
  form_id      String
  treatment_id String

  form      Form      @relation(fields: [form_id], references: [id], onDelete: Cascade)
  treatment Treatment @relation(fields: [treatment_id], references: [id], onDelete: Cascade)

  @@map("forms_treatments")
}

model Admin {
  id         String  @id
  name       String
  email      String
  password   String
  created_at BigInt
  superadmin Boolean

  @@map("admins")
}

model Operator {
  id                           String   @id
  name                         String
  email                        String
  password                     String
  created_at                   BigInt
  created_by                   String
  sign_up_comission_percentage Decimal?
  topup_comission_percentage   Decimal?

  wallet        OperatorWallet?
  invite_tokens InviteToken[]
  transactions  Transaction[]
  partners      Partner[]

  @@map("operators")
}

model OperatorWallet {
  id          String  @id
  operator_id String  @unique
  document    String
  balance     Int
  external_id String?

  operator     Operator              @relation(fields: [operator_id], references: [id], onDelete: Cascade)
  transactions OperatorTransaction[]

  @@map("operator_wallets")
}

model OperatorTransaction {
  id                   String   @id
  operator_wallet_id   String
  type                 String
  amount               Int
  created_at           BigInt
  external_id          String?
  comission_percentage Decimal?
  comission_type       String?
  partner_id           String?

  operator_wallet OperatorWallet @relation(fields: [operator_wallet_id], references: [id], onDelete: Cascade)
  partner         Partner?       @relation(fields: [partner_id], references: [id], onDelete: SetNull)

  @@map("operator_transactions")
}

model Partner {
  id           String  @id
  name         String
  company_name String
  cpf          String
  cnpj         String?
  status       String
  email        String
  password     String
  created_at   BigInt
  phone_number String
  cep          String
  city         String
  state        String
  lat          String
  lng          String
  operator_id  String?
  affiliate_id String?

  partners_treatments    PartnerTreatment[]
  leads_dispatch         LeadDispatch[]
  wallet                 Wallet?
  operator               Operator?              @relation(fields: [operator_id], references: [id], onDelete: SetNull)
  operator_transactions  OperatorTransaction[]
  affiliate              Affiliate?             @relation(fields: [affiliate_id], references: [id], onDelete: SetNull)
  affiliate_transactions AffiliateTransaction[]

  @@map("partners")
}

model PartnerTreatment {
  id           String @id
  partner_id   String
  treatment_id String

  partner   Partner   @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  treatment Treatment @relation(fields: [treatment_id], references: [id], onDelete: Cascade)

  @@map("partners_treatments")
}

model Wallet {
  id          String  @id
  partner_id  String  @unique
  document    String
  balance     Int
  external_id String?

  partner      Partner       @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("wallets")
}

model Transaction {
  id           String  @id
  wallet_id    String
  operator_id  String?
  status       String
  type         String
  amount       Int
  created_at   BigInt
  external_id  String?
  lead_price   Int?
  lead_id      String?
  bonus_amount Int?

  wallet        Wallet        @relation(fields: [wallet_id], references: [id], onDelete: Cascade)
  lead          Lead?         @relation(fields: [lead_id], references: [id], onDelete: Cascade)
  operator      Operator?     @relation(fields: [operator_id], references: [id], onDelete: SetNull)
  invite_tokens InviteToken[]

  @@map("transactions")
}

model Affiliate {
  id                    String  @id
  name                  String
  email                 String
  password              String
  created_at            BigInt
  referral_code         String
  comission_percentage  Decimal
  lead_comission_amount Int?

  wallet   AffiliateWallet?
  partners Partner[]

  @@map("affiliates")
}

model AffiliateWallet {
  id           String @id
  affiliate_id String @unique
  document     String
  balance      Int

  affiliate    Affiliate              @relation(fields: [affiliate_id], references: [id], onDelete: Cascade)
  transactions AffiliateTransaction[]

  @@map("affiliate_wallets")
}

model AffiliateTransaction {
  id                    String   @id
  affiliate_wallet_id   String
  partner_id            String?
  lead_id               String?
  lead_price            Int?
  lead_comission_amount Int?
  type                  String
  amount                Int
  created_at            BigInt
  comission_percentage  Decimal?

  affiliate_wallet AffiliateWallet @relation(fields: [affiliate_wallet_id], references: [id], onDelete: Cascade)
  partner          Partner?        @relation(fields: [partner_id], references: [id], onDelete: SetNull)
  lead             Lead?           @relation(fields: [lead_id], references: [id], onDelete: SetNull)

  @@map("affiliate_transactions")
}

model Lead {
  id           String @id
  name         String
  phone_number String
  cep          String
  lat          String
  lng          String
  created_at   BigInt

  leads_treatments       LeadTreatment[]
  leads_dispatch         LeadDispatch[]
  transactions           Transaction[]
  affiliate_transactions AffiliateTransaction[]

  @@map("leads")
}

model LeadTreatment {
  id           String @id
  lead_id      String
  treatment_id String

  lead      Lead      @relation(fields: [lead_id], references: [id], onDelete: Cascade)
  treatment Treatment @relation(fields: [treatment_id], references: [id], onDelete: Cascade)

  @@map("leads_treatments")
}

model LeadDispatch {
  id           String @id
  lead_id      String
  partner_id   String
  message_sent String @db.Text
  created_at   BigInt

  lead       Lead                    @relation(fields: [lead_id], references: [id], onDelete: Cascade)
  partner    Partner                 @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  treatments LeadDispatchTreatment[]

  @@map("leads_dispatch")
}

model LeadDispatchTreatment {
  id               String @id
  lead_dispatch_id String
  treatment_id     String

  lead_dispatch LeadDispatch @relation(fields: [lead_dispatch_id], references: [id], onDelete: Cascade)
  treatment     Treatment    @relation(fields: [treatment_id], references: [id], onDelete: Cascade)

  @@map("leads_dispatch_treatments")
}

model InviteToken {
  id             String  @id
  name           String
  phone_number   String
  token          String
  created_at     BigInt
  operator_id    String?
  transaction_id String?

  operator    Operator?    @relation(fields: [operator_id], references: [id], onDelete: Cascade)
  transaction Transaction? @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  @@map("invite_tokens")
}
