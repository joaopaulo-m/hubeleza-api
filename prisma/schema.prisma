generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Config {
  id         String @id @default(uuid())
  lead_price Int    @default(0)

  @@map("configs")
}

model Treatment {
  id       String @id
  name     String
  price    Int    @default(0)
  category String

  partners_treatments PartnerTreatment[]
  leads_treatments    LeadTreatment[]
  forms               FormTreatment[]
  leads_dispatch      LeadDispatchTreatment[]
  state_prices        TreatmentStatePrice[]

  @@map("treatments")
}

model TreatmentStatePrice {
  id           String @id
  treatment_id String
  state        String
  price        Int

  treatment Treatment @relation(fields: [treatment_id], references: [id], onDelete: Cascade)

  @@map("treatment_state_prices")
}

model Form {
  id               String @id
  name             String
  external_form_id String

  treatments FormTreatment[]

  @@map("forms")
}

model FormTreatment {
  id           String @id
  form_id      String
  treatment_id String

  form      Form      @relation(fields: [form_id], references: [id], onDelete: Cascade)
  treatment Treatment @relation(fields: [treatment_id], references: [id], onDelete: Cascade)

  @@map("forms_treatments")
}

model Admin {
  id         String  @id
  name       String
  email      String
  password   String
  created_at BigInt
  superadmin Boolean

  @@map("admins")
}

model Operator {
  id         String @id
  name       String
  email      String
  password   String
  created_at BigInt
  created_by String

  @@map("operators")
}

model Partner {
  id           String  @id
  name         String
  company_name String
  cpf          String
  cnpj         String?
  status       String
  email        String
  password     String
  created_at   BigInt
  phone_number String
  cep          String
  city         String
  state        String
  lat          String
  lng          String

  partners_treatments PartnerTreatment[]
  leads_dispatch      LeadDispatch[]
  wallet              Wallet?

  @@map("partners")
}

model PartnerTreatment {
  id           String @id
  partner_id   String
  treatment_id String

  partner   Partner   @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  treatment Treatment @relation(fields: [treatment_id], references: [id], onDelete: Cascade)

  @@map("partners_treatments")
}

model Wallet {
  id          String  @id
  partner_id  String  @unique
  document    String
  balance     Int
  external_id String?

  partner      Partner       @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("wallets")
}

model Transaction {
  id           String  @id
  wallet_id    String
  status       String
  type         String
  amount       Int
  created_at   BigInt
  external_id  String?
  lead_price   Int?
  lead_id      String?
  bonus_amount Int?

  wallet Wallet @relation(fields: [wallet_id], references: [id], onDelete: Cascade)
  lead   Lead?  @relation(fields: [lead_id], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Lead {
  id           String @id
  name         String
  phone_number String
  cep          String
  lat          String
  lng          String
  created_at   BigInt

  leads_treatments LeadTreatment[]
  leads_dispatch   LeadDispatch[]
  transactions     Transaction[]

  @@map("leads")
}

model LeadTreatment {
  id           String @id
  lead_id      String
  treatment_id String

  lead      Lead      @relation(fields: [lead_id], references: [id], onDelete: Cascade)
  treatment Treatment @relation(fields: [treatment_id], references: [id], onDelete: Cascade)

  @@map("leads_treatments")
}

model LeadDispatch {
  id           String @id
  lead_id      String
  partner_id   String
  message_sent String @db.Text
  created_at   BigInt

  lead       Lead                    @relation(fields: [lead_id], references: [id], onDelete: Cascade)
  partner    Partner                 @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  treatments LeadDispatchTreatment[]

  @@map("leads_dispatch")
}

model LeadDispatchTreatment {
  id               String @id
  lead_dispatch_id String
  treatment_id     String

  lead_dispatch LeadDispatch @relation(fields: [lead_dispatch_id], references: [id], onDelete: Cascade)
  treatment     Treatment    @relation(fields: [treatment_id], references: [id], onDelete: Cascade)

  @@map("leads_dispatch_treatments")
}

model InviteToken {
  id           String @id
  name         String
  phone_number String
  token        String
  created_at   BigInt

  @@map("invite_tokens")
}
